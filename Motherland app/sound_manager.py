# -*- coding: utf-8 -*-
"""
Created on Wed May  7 20:48:18 2025

@author: isma0
"""


from audioplayer import AudioPlayer

class SoundManager:
    def __init__(self, app):
        self.app = app
        self.player = None
        self.musique_activee = False
        self.fichier_audio = "udu-nigerian-instrument-322564.mp3"  # Modifica con il tuo file se diverso

    def activer_musique(self):
        """D√©marre la musique en boucle si elle est d√©sactiv√©e"""
        if not self.musique_activee:
            self.player = AudioPlayer(self.fichier_audio)
            
            self.player.play(loop=-1)   # -1 = boucle infinie
            self.musique_activee = True
            
            

    def couper_musique(self):
        """Arr√™te la musique si elle est active"""
        if self.player:
            self.player.stop()
            self.musique_activee = False
"""
 if not self.player.is_playing():
            self.player = AudioPlayer(self.morceau_courant)
            self.player.play()
    
        if self.root:
            self.root.after(1000, self._verifier_boucle)  
            
            
            # Appelle cette fonction √† nouveau dans 1 seconde. MAIS CA RENTRAIT PAS DANS LA BOUCLE
   Le probl√®me ici, c‚Äôest que ce code ne red√©marre la musique que si elle n'est pas en train de jouer (not self.player.is_playing()), 
   mais il ne v√©rifie pas si elle est termin√©e. Donc, si la musique s'arr√™te naturellement (parce qu‚Äôelle est finie), is_playing() 
   renverra False, mais seulement une fois que after l‚Äôa re-test√©         
            . SE LA MUSICA NON SUONA RIAPRO IL FICHER 
           Si le son est arr√™t√© manuellement (par exemple avec stop()), alors is_playing() renvoie False, donc la musique repart.

üîπ Mais si le son se termine naturellement (c‚Äôest-√†-dire qu‚Äôon arrive √† la fin du fichier audio), cela d√©pend de la fa√ßon dont la classe AudioPlayer est con√ßue :

Si is_playing() ne retourne pas False quand la musique se termine toute seule, alors elle ne sera jamais relanc√©e.

Et m√™me si is_playing() retourne bien False, ce contr√¥le (after(1000, ...)) est fait seulement toutes les secondes, donc il peut y avoir un petit d√©lai.  
            
            
            AVANT JE VOULAIS APPELER CETTE FONCTION CHAQUE UNE SECONDE POUR VERIFIER SI LE SON JOUAI OU PAS MAIS CA RENTRAIT PAS DANS LA BOUCLE


Cette classe g√®re le lecteur audio.

__init__:

self.player est l‚Äôobjet du lecteur audio (initialement None). LA LIBRERIE 

self.musique_activee indique si la musique est en train de jouer (bool√©en).FALSE TRUE

self.fichier_audio contient le chemin vers le fichier mp3 √† jouer.

activer_musique(self):

Si la musique n‚Äôest pas d√©j√† active (if not self.musique_activee), on cr√©e un nouveau lecteur AudioPlayer avec le fichier mp3.

Puis on lance la musique en boucle infinie (loop=-1).

On met self.musique_activee = True pour signaler que la musique joue.

couper_musique(self):

Si un lecteur existe (if self.player), on arr√™te la musique (self.player.stop()).

On met self.musique_activee = False pour signaler que la musique est stopp√©e.
----------------------------------------------------------------------------------------------------
La biblioth√®que audioplayer (un module Python tiers) a sa propre impl√©mentation de la m√©thode play().

Dans cette m√©thode, le param√®tre loop est d√©fini comme suit dans la doc ou le code source :

loop=0 ‚Üí pas de r√©p√©tition

loop=n (nombre positif) ‚Üí r√©p√©titions n fois

loop=-1 ‚Üí boucle infinie
la m√©thode play() prend un param√®tre nomm√© loop.
IN REALTA SI POTEVA FARE SENZA GLI IF BASTAVA AUDIO PLAYER

"""


  

